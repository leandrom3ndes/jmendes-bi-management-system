<?php
/**
 * StagingFolder
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * StagingFolder Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StagingFolder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StagingFolder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delete_after_upload' => 'bool',
        'enabled' => 'bool',
        'files' => 'string',
        'folder_path' => 'string',
        'id' => 'int',
        'label' => 'string',
        'preview_height' => 'int',
        'preview_width' => 'int',
        'uncompress' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'delete_after_upload' => null,
        'enabled' => null,
        'files' => null,
        'folder_path' => null,
        'id' => null,
        'label' => null,
        'preview_height' => null,
        'preview_width' => null,
        'uncompress' => null,
        'url' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delete_after_upload' => 'delete_after_upload',
        'enabled' => 'enabled',
        'files' => 'files',
        'folder_path' => 'folder_path',
        'id' => 'id',
        'label' => 'label',
        'preview_height' => 'preview_height',
        'preview_width' => 'preview_width',
        'uncompress' => 'uncompress',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delete_after_upload' => 'setDeleteAfterUpload',
        'enabled' => 'setEnabled',
        'files' => 'setFiles',
        'folder_path' => 'setFolderPath',
        'id' => 'setId',
        'label' => 'setLabel',
        'preview_height' => 'setPreviewHeight',
        'preview_width' => 'setPreviewWidth',
        'uncompress' => 'setUncompress',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delete_after_upload' => 'getDeleteAfterUpload',
        'enabled' => 'getEnabled',
        'files' => 'getFiles',
        'folder_path' => 'getFolderPath',
        'id' => 'getId',
        'label' => 'getLabel',
        'preview_height' => 'getPreviewHeight',
        'preview_width' => 'getPreviewWidth',
        'uncompress' => 'getUncompress',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const UNCOMPRESS_Y = 'y';
    const UNCOMPRESS_N = 'n';
    const UNCOMPRESS_A = 'a';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUncompressAllowableValues()
    {
        return [
            self::UNCOMPRESS_Y,
            self::UNCOMPRESS_N,
            self::UNCOMPRESS_A,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delete_after_upload'] = isset($data['delete_after_upload']) ? $data['delete_after_upload'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['folder_path'] = isset($data['folder_path']) ? $data['folder_path'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['preview_height'] = isset($data['preview_height']) ? $data['preview_height'] : null;
        $this->container['preview_width'] = isset($data['preview_width']) ? $data['preview_width'] : null;
        $this->container['uncompress'] = isset($data['uncompress']) ? $data['uncompress'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['folder_path'] === null) {
            $invalidProperties[] = "'folder_path' can't be null";
        }
        if ((mb_strlen($this->container['folder_path']) > 255)) {
            $invalidProperties[] = "invalid value for 'folder_path', the character length must be smaller than or equal to 255.";
        }

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 128)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['preview_height']) && ($this->container['preview_height'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'preview_height', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['preview_height']) && ($this->container['preview_height'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'preview_height', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['preview_width'] === null) {
            $invalidProperties[] = "'preview_width' can't be null";
        }
        if (($this->container['preview_width'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'preview_width', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['preview_width'] < -2147483648)) {
            $invalidProperties[] = "invalid value for 'preview_width', must be bigger than or equal to -2147483648.";
        }

        if ($this->container['uncompress'] === null) {
            $invalidProperties[] = "'uncompress' can't be null";
        }
        $allowedValues = $this->getUncompressAllowableValues();
        if (!is_null($this->container['uncompress']) && !in_array($this->container['uncompress'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'uncompress', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delete_after_upload
     *
     * @return bool|null
     */
    public function getDeleteAfterUpload()
    {
        return $this->container['delete_after_upload'];
    }

    /**
     * Sets delete_after_upload
     *
     * @param bool|null $delete_after_upload Delete the file after is has been successfully uploaded.
     *
     * @return $this
     */
    public function setDeleteAfterUpload($delete_after_upload)
    {
        $this->container['delete_after_upload'] = $delete_after_upload;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets files
     *
     * @return string|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param string|null $files files
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets folder_path
     *
     * @return string
     */
    public function getFolderPath()
    {
        return $this->container['folder_path'];
    }

    /**
     * Sets folder_path
     *
     * @param string $folder_path Server side filesystem path.
     *
     * @return $this
     */
    public function setFolderPath($folder_path)
    {
        if ((mb_strlen($folder_path) > 255)) {
            throw new \InvalidArgumentException('invalid length for $folder_path when calling StagingFolder., must be smaller than or equal to 255.');
        }

        $this->container['folder_path'] = $folder_path;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label A short text to describe this source.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 128)) {
            throw new \InvalidArgumentException('invalid length for $label when calling StagingFolder., must be smaller than or equal to 128.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets preview_height
     *
     * @return int|null
     */
    public function getPreviewHeight()
    {
        return $this->container['preview_height'];
    }

    /**
     * Sets preview_height
     *
     * @param int|null $preview_height Height value to be passed to the converter backend.
     *
     * @return $this
     */
    public function setPreviewHeight($preview_height)
    {

        if (!is_null($preview_height) && ($preview_height > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $preview_height when calling StagingFolder., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($preview_height) && ($preview_height < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $preview_height when calling StagingFolder., must be bigger than or equal to -2147483648.');
        }

        $this->container['preview_height'] = $preview_height;

        return $this;
    }

    /**
     * Gets preview_width
     *
     * @return int
     */
    public function getPreviewWidth()
    {
        return $this->container['preview_width'];
    }

    /**
     * Sets preview_width
     *
     * @param int $preview_width Width value to be passed to the converter backend.
     *
     * @return $this
     */
    public function setPreviewWidth($preview_width)
    {

        if (($preview_width > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $preview_width when calling StagingFolder., must be smaller than or equal to 2147483647.');
        }
        if (($preview_width < -2147483648)) {
            throw new \InvalidArgumentException('invalid value for $preview_width when calling StagingFolder., must be bigger than or equal to -2147483648.');
        }

        $this->container['preview_width'] = $preview_width;

        return $this;
    }

    /**
     * Gets uncompress
     *
     * @return string
     */
    public function getUncompress()
    {
        return $this->container['uncompress'];
    }

    /**
     * Sets uncompress
     *
     * @param string $uncompress Whether to expand or not compressed archives.
     *
     * @return $this
     */
    public function setUncompress($uncompress)
    {
        $allowedValues = $this->getUncompressAllowableValues();
        if (!in_array($uncompress, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'uncompress', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uncompress'] = $uncompress;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


