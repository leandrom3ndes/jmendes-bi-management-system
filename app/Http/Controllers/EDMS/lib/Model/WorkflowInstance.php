<?php
/**
 * WorkflowInstance
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WorkflowInstance Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowInstance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkflowInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'current_state' => '\OpenAPI\Client\Model\WorkflowState',
        'document_workflow_url' => 'string',
        'last_log_entry' => '\OpenAPI\Client\Model\WorkflowInstanceLogEntry',
        'log_entries_url' => 'string',
        'transition_choices' => '\OpenAPI\Client\Model\WorkflowTransition[]',
        'workflow' => '\OpenAPI\Client\Model\Workflow'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'current_state' => null,
        'document_workflow_url' => null,
        'last_log_entry' => null,
        'log_entries_url' => null,
        'transition_choices' => null,
        'workflow' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_state' => 'current_state',
        'document_workflow_url' => 'document_workflow_url',
        'last_log_entry' => 'last_log_entry',
        'log_entries_url' => 'log_entries_url',
        'transition_choices' => 'transition_choices',
        'workflow' => 'workflow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_state' => 'setCurrentState',
        'document_workflow_url' => 'setDocumentWorkflowUrl',
        'last_log_entry' => 'setLastLogEntry',
        'log_entries_url' => 'setLogEntriesUrl',
        'transition_choices' => 'setTransitionChoices',
        'workflow' => 'setWorkflow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_state' => 'getCurrentState',
        'document_workflow_url' => 'getDocumentWorkflowUrl',
        'last_log_entry' => 'getLastLogEntry',
        'log_entries_url' => 'getLogEntriesUrl',
        'transition_choices' => 'getTransitionChoices',
        'workflow' => 'getWorkflow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_state'] = isset($data['current_state']) ? $data['current_state'] : null;
        $this->container['document_workflow_url'] = isset($data['document_workflow_url']) ? $data['document_workflow_url'] : null;
        $this->container['last_log_entry'] = isset($data['last_log_entry']) ? $data['last_log_entry'] : null;
        $this->container['log_entries_url'] = isset($data['log_entries_url']) ? $data['log_entries_url'] : null;
        $this->container['transition_choices'] = isset($data['transition_choices']) ? $data['transition_choices'] : null;
        $this->container['workflow'] = isset($data['workflow']) ? $data['workflow'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_state
     *
     * @return \OpenAPI\Client\Model\WorkflowState|null
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     *
     * @param \OpenAPI\Client\Model\WorkflowState|null $current_state current_state
     *
     * @return $this
     */
    public function setCurrentState($current_state)
    {
        $this->container['current_state'] = $current_state;

        return $this;
    }

    /**
     * Gets document_workflow_url
     *
     * @return string|null
     */
    public function getDocumentWorkflowUrl()
    {
        return $this->container['document_workflow_url'];
    }

    /**
     * Sets document_workflow_url
     *
     * @param string|null $document_workflow_url API URL pointing to a workflow in relation to the document to which it is attached. This URL is different than the canonical workflow URL.
     *
     * @return $this
     */
    public function setDocumentWorkflowUrl($document_workflow_url)
    {
        $this->container['document_workflow_url'] = $document_workflow_url;

        return $this;
    }

    /**
     * Gets last_log_entry
     *
     * @return \OpenAPI\Client\Model\WorkflowInstanceLogEntry|null
     */
    public function getLastLogEntry()
    {
        return $this->container['last_log_entry'];
    }

    /**
     * Sets last_log_entry
     *
     * @param \OpenAPI\Client\Model\WorkflowInstanceLogEntry|null $last_log_entry last_log_entry
     *
     * @return $this
     */
    public function setLastLogEntry($last_log_entry)
    {
        $this->container['last_log_entry'] = $last_log_entry;

        return $this;
    }

    /**
     * Gets log_entries_url
     *
     * @return string|null
     */
    public function getLogEntriesUrl()
    {
        return $this->container['log_entries_url'];
    }

    /**
     * Sets log_entries_url
     *
     * @param string|null $log_entries_url A link to the entire history of this workflow.
     *
     * @return $this
     */
    public function setLogEntriesUrl($log_entries_url)
    {
        $this->container['log_entries_url'] = $log_entries_url;

        return $this;
    }

    /**
     * Gets transition_choices
     *
     * @return \OpenAPI\Client\Model\WorkflowTransition[]|null
     */
    public function getTransitionChoices()
    {
        return $this->container['transition_choices'];
    }

    /**
     * Sets transition_choices
     *
     * @param \OpenAPI\Client\Model\WorkflowTransition[]|null $transition_choices transition_choices
     *
     * @return $this
     */
    public function setTransitionChoices($transition_choices)
    {
        $this->container['transition_choices'] = $transition_choices;

        return $this;
    }

    /**
     * Gets workflow
     *
     * @return \OpenAPI\Client\Model\Workflow|null
     */
    public function getWorkflow()
    {
        return $this->container['workflow'];
    }

    /**
     * Sets workflow
     *
     * @param \OpenAPI\Client\Model\Workflow|null $workflow workflow
     *
     * @return $this
     */
    public function setWorkflow($workflow)
    {
        $this->container['workflow'] = $workflow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


