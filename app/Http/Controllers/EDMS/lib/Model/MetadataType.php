<?php
/**
 * MetadataType
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MetadataType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MetadataType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MetadataType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default' => 'string',
        'id' => 'int',
        'label' => 'string',
        'lookup' => 'string',
        'name' => 'string',
        'parser' => 'string',
        'url' => 'string',
        'validation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'default' => null,
        'id' => null,
        'label' => null,
        'lookup' => null,
        'name' => null,
        'parser' => null,
        'url' => 'uri',
        'validation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default' => 'default',
        'id' => 'id',
        'label' => 'label',
        'lookup' => 'lookup',
        'name' => 'name',
        'parser' => 'parser',
        'url' => 'url',
        'validation' => 'validation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default' => 'setDefault',
        'id' => 'setId',
        'label' => 'setLabel',
        'lookup' => 'setLookup',
        'name' => 'setName',
        'parser' => 'setParser',
        'url' => 'setUrl',
        'validation' => 'setValidation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default' => 'getDefault',
        'id' => 'getId',
        'label' => 'getLabel',
        'lookup' => 'getLookup',
        'name' => 'getName',
        'parser' => 'getParser',
        'url' => 'getUrl',
        'validation' => 'getValidation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PARSER_DATE_AND_TIME_PARSER = 'mayan.apps.metadata.parsers.DateAndTimeParser';
    const PARSER_DATE_PARSER = 'mayan.apps.metadata.parsers.DateParser';
    const PARSER_TIME_PARSER = 'mayan.apps.metadata.parsers.TimeParser';
    const VALIDATION_DATE_AND_TIME_VALIDATOR = 'mayan.apps.metadata.validators.DateAndTimeValidator';
    const VALIDATION_DATE_VALIDATOR = 'mayan.apps.metadata.validators.DateValidator';
    const VALIDATION_TIME_VALIDATOR = 'mayan.apps.metadata.validators.TimeValidator';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getParserAllowableValues()
    {
        return [
            self::PARSER_DATE_AND_TIME_PARSER,
            self::PARSER_DATE_PARSER,
            self::PARSER_TIME_PARSER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidationAllowableValues()
    {
        return [
            self::VALIDATION_DATE_AND_TIME_VALIDATOR,
            self::VALIDATION_DATE_VALIDATOR,
            self::VALIDATION_TIME_VALIDATOR,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['lookup'] = isset($data['lookup']) ? $data['lookup'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parser'] = isset($data['parser']) ? $data['parser'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['default']) && (mb_strlen($this->container['default']) > 128)) {
            $invalidProperties[] = "invalid value for 'default', the character length must be smaller than or equal to 128.";
        }

        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ((mb_strlen($this->container['label']) > 48)) {
            $invalidProperties[] = "invalid value for 'label', the character length must be smaller than or equal to 48.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 48)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 48.";
        }

        $allowedValues = $this->getParserAllowableValues();
        if (!is_null($this->container['parser']) && !in_array($this->container['parser'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'parser', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValidationAllowableValues();
        if (!is_null($this->container['validation']) && !in_array($this->container['validation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'validation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default
     *
     * @return string|null
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param string|null $default Enter a template to render. Use Django's default templating language (https://docs.djangoproject.com/en/1.11/ref/templates/builtins/)
     *
     * @return $this
     */
    public function setDefault($default)
    {
        if (!is_null($default) && (mb_strlen($default) > 128)) {
            throw new \InvalidArgumentException('invalid length for $default when calling MetadataType., must be smaller than or equal to 128.');
        }

        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Short description of this metadata type.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        if ((mb_strlen($label) > 48)) {
            throw new \InvalidArgumentException('invalid length for $label when calling MetadataType., must be smaller than or equal to 48.');
        }

        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets lookup
     *
     * @return string|null
     */
    public function getLookup()
    {
        return $this->container['lookup'];
    }

    /**
     * Sets lookup
     *
     * @param string|null $lookup Enter a template to render. Must result in a comma delimited string. Use Django's default templating language (https://docs.djangoproject.com/en/1.11/ref/templates/builtins/).
     *
     * @return $this
     */
    public function setLookup($lookup)
    {
        $this->container['lookup'] = $lookup;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name used by other apps to reference this metadata type. Do not use python reserved words, or spaces.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 48)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MetadataType., must be smaller than or equal to 48.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parser
     *
     * @return string|null
     */
    public function getParser()
    {
        return $this->container['parser'];
    }

    /**
     * Sets parser
     *
     * @param string|null $parser The parser will reformat the value entered to conform to the expected format.
     *
     * @return $this
     */
    public function setParser($parser)
    {
        $allowedValues = $this->getParserAllowableValues();
        if (!is_null($parser) && !in_array($parser, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'parser', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['parser'] = $parser;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return string|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param string|null $validation The validator will reject data entry if the value entered does not conform to the expected format.
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $allowedValues = $this->getValidationAllowableValues();
        if (!is_null($validation) && !in_array($validation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'validation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['validation'] = $validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


