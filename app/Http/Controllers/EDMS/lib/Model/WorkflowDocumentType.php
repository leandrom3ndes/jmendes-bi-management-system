<?php
/**
 * WorkflowDocumentType
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WorkflowDocumentType Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WorkflowDocumentType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WorkflowDocumentType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'delete_time_period' => 'int',
        'delete_time_unit' => 'string',
        'documents_url' => 'string',
        'documents_count' => 'string',
        'id' => 'int',
        'label' => 'string',
        'filenames' => '\OpenAPI\Client\Model\DocumentTypeFilename[]',
        'trash_time_period' => 'int',
        'trash_time_unit' => 'string',
        'url' => 'string',
        'workflow_document_type_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'delete_time_period' => null,
        'delete_time_unit' => null,
        'documents_url' => 'uri',
        'documents_count' => null,
        'id' => null,
        'label' => null,
        'filenames' => null,
        'trash_time_period' => null,
        'trash_time_unit' => null,
        'url' => 'uri',
        'workflow_document_type_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'delete_time_period' => 'delete_time_period',
        'delete_time_unit' => 'delete_time_unit',
        'documents_url' => 'documents_url',
        'documents_count' => 'documents_count',
        'id' => 'id',
        'label' => 'label',
        'filenames' => 'filenames',
        'trash_time_period' => 'trash_time_period',
        'trash_time_unit' => 'trash_time_unit',
        'url' => 'url',
        'workflow_document_type_url' => 'workflow_document_type_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'delete_time_period' => 'setDeleteTimePeriod',
        'delete_time_unit' => 'setDeleteTimeUnit',
        'documents_url' => 'setDocumentsUrl',
        'documents_count' => 'setDocumentsCount',
        'id' => 'setId',
        'label' => 'setLabel',
        'filenames' => 'setFilenames',
        'trash_time_period' => 'setTrashTimePeriod',
        'trash_time_unit' => 'setTrashTimeUnit',
        'url' => 'setUrl',
        'workflow_document_type_url' => 'setWorkflowDocumentTypeUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'delete_time_period' => 'getDeleteTimePeriod',
        'delete_time_unit' => 'getDeleteTimeUnit',
        'documents_url' => 'getDocumentsUrl',
        'documents_count' => 'getDocumentsCount',
        'id' => 'getId',
        'label' => 'getLabel',
        'filenames' => 'getFilenames',
        'trash_time_period' => 'getTrashTimePeriod',
        'trash_time_unit' => 'getTrashTimeUnit',
        'url' => 'getUrl',
        'workflow_document_type_url' => 'getWorkflowDocumentTypeUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DELETE_TIME_UNIT_DAYS = 'days';
    const DELETE_TIME_UNIT_HOURS = 'hours';
    const DELETE_TIME_UNIT_MINUTES = 'minutes';
    const TRASH_TIME_UNIT_DAYS = 'days';
    const TRASH_TIME_UNIT_HOURS = 'hours';
    const TRASH_TIME_UNIT_MINUTES = 'minutes';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeleteTimeUnitAllowableValues()
    {
        return [
            self::DELETE_TIME_UNIT_DAYS,
            self::DELETE_TIME_UNIT_HOURS,
            self::DELETE_TIME_UNIT_MINUTES,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTrashTimeUnitAllowableValues()
    {
        return [
            self::TRASH_TIME_UNIT_DAYS,
            self::TRASH_TIME_UNIT_HOURS,
            self::TRASH_TIME_UNIT_MINUTES,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['delete_time_period'] = isset($data['delete_time_period']) ? $data['delete_time_period'] : null;
        $this->container['delete_time_unit'] = isset($data['delete_time_unit']) ? $data['delete_time_unit'] : null;
        $this->container['documents_url'] = isset($data['documents_url']) ? $data['documents_url'] : null;
        $this->container['documents_count'] = isset($data['documents_count']) ? $data['documents_count'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['filenames'] = isset($data['filenames']) ? $data['filenames'] : null;
        $this->container['trash_time_period'] = isset($data['trash_time_period']) ? $data['trash_time_period'] : null;
        $this->container['trash_time_unit'] = isset($data['trash_time_unit']) ? $data['trash_time_unit'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['workflow_document_type_url'] = isset($data['workflow_document_type_url']) ? $data['workflow_document_type_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeleteTimeUnitAllowableValues();
        if (!is_null($this->container['delete_time_unit']) && !in_array($this->container['delete_time_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delete_time_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTrashTimeUnitAllowableValues();
        if (!is_null($this->container['trash_time_unit']) && !in_array($this->container['trash_time_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'trash_time_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets delete_time_period
     *
     * @return int|null
     */
    public function getDeleteTimePeriod()
    {
        return $this->container['delete_time_period'];
    }

    /**
     * Sets delete_time_period
     *
     * @param int|null $delete_time_period Amount of time after which documents of this type in the trash will be deleted.
     *
     * @return $this
     */
    public function setDeleteTimePeriod($delete_time_period)
    {
        $this->container['delete_time_period'] = $delete_time_period;

        return $this;
    }

    /**
     * Gets delete_time_unit
     *
     * @return string|null
     */
    public function getDeleteTimeUnit()
    {
        return $this->container['delete_time_unit'];
    }

    /**
     * Sets delete_time_unit
     *
     * @param string|null $delete_time_unit delete_time_unit
     *
     * @return $this
     */
    public function setDeleteTimeUnit($delete_time_unit)
    {
        $allowedValues = $this->getDeleteTimeUnitAllowableValues();
        if (!is_null($delete_time_unit) && !in_array($delete_time_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delete_time_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delete_time_unit'] = $delete_time_unit;

        return $this;
    }

    /**
     * Gets documents_url
     *
     * @return string|null
     */
    public function getDocumentsUrl()
    {
        return $this->container['documents_url'];
    }

    /**
     * Sets documents_url
     *
     * @param string|null $documents_url documents_url
     *
     * @return $this
     */
    public function setDocumentsUrl($documents_url)
    {
        $this->container['documents_url'] = $documents_url;

        return $this;
    }

    /**
     * Gets documents_count
     *
     * @return string|null
     */
    public function getDocumentsCount()
    {
        return $this->container['documents_count'];
    }

    /**
     * Sets documents_count
     *
     * @param string|null $documents_count documents_count
     *
     * @return $this
     */
    public function setDocumentsCount($documents_count)
    {
        $this->container['documents_count'] = $documents_count;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label The name of the document type.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets filenames
     *
     * @return \OpenAPI\Client\Model\DocumentTypeFilename[]|null
     */
    public function getFilenames()
    {
        return $this->container['filenames'];
    }

    /**
     * Sets filenames
     *
     * @param \OpenAPI\Client\Model\DocumentTypeFilename[]|null $filenames filenames
     *
     * @return $this
     */
    public function setFilenames($filenames)
    {
        $this->container['filenames'] = $filenames;

        return $this;
    }

    /**
     * Gets trash_time_period
     *
     * @return int|null
     */
    public function getTrashTimePeriod()
    {
        return $this->container['trash_time_period'];
    }

    /**
     * Sets trash_time_period
     *
     * @param int|null $trash_time_period Amount of time after which documents of this type will be moved to the trash.
     *
     * @return $this
     */
    public function setTrashTimePeriod($trash_time_period)
    {
        $this->container['trash_time_period'] = $trash_time_period;

        return $this;
    }

    /**
     * Gets trash_time_unit
     *
     * @return string|null
     */
    public function getTrashTimeUnit()
    {
        return $this->container['trash_time_unit'];
    }

    /**
     * Sets trash_time_unit
     *
     * @param string|null $trash_time_unit trash_time_unit
     *
     * @return $this
     */
    public function setTrashTimeUnit($trash_time_unit)
    {
        $allowedValues = $this->getTrashTimeUnitAllowableValues();
        if (!is_null($trash_time_unit) && !in_array($trash_time_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'trash_time_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['trash_time_unit'] = $trash_time_unit;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets workflow_document_type_url
     *
     * @return string|null
     */
    public function getWorkflowDocumentTypeUrl()
    {
        return $this->container['workflow_document_type_url'];
    }

    /**
     * Sets workflow_document_type_url
     *
     * @param string|null $workflow_document_type_url API URL pointing to a document type in relation to the workflow to which it is attached. This URL is different than the canonical document type URL.
     *
     * @return $this
     */
    public function setWorkflowDocumentTypeUrl($workflow_document_type_url)
    {
        $this->container['workflow_document_type_url'] = $workflow_document_type_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


