<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'actor' => 'string',
        'target' => 'string',
        'actor_content_type' => '\OpenAPI\Client\Model\ContentType',
        'target_content_type' => '\OpenAPI\Client\Model\ContentType',
        'verb' => '\OpenAPI\Client\Model\EventType',
        'actor_object_id' => 'string',
        'description' => 'string',
        'target_object_id' => 'string',
        'timestamp' => '\DateTime',
        'public' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'actor' => null,
        'target' => null,
        'actor_content_type' => null,
        'target_content_type' => null,
        'verb' => null,
        'actor_object_id' => null,
        'description' => null,
        'target_object_id' => null,
        'timestamp' => 'date-time',
        'public' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'actor' => 'actor',
        'target' => 'target',
        'actor_content_type' => 'actor_content_type',
        'target_content_type' => 'target_content_type',
        'verb' => 'verb',
        'actor_object_id' => 'actor_object_id',
        'description' => 'description',
        'target_object_id' => 'target_object_id',
        'timestamp' => 'timestamp',
        'public' => 'public'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'actor' => 'setActor',
        'target' => 'setTarget',
        'actor_content_type' => 'setActorContentType',
        'target_content_type' => 'setTargetContentType',
        'verb' => 'setVerb',
        'actor_object_id' => 'setActorObjectId',
        'description' => 'setDescription',
        'target_object_id' => 'setTargetObjectId',
        'timestamp' => 'setTimestamp',
        'public' => 'setPublic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'actor' => 'getActor',
        'target' => 'getTarget',
        'actor_content_type' => 'getActorContentType',
        'target_content_type' => 'getTargetContentType',
        'verb' => 'getVerb',
        'actor_object_id' => 'getActorObjectId',
        'description' => 'getDescription',
        'target_object_id' => 'getTargetObjectId',
        'timestamp' => 'getTimestamp',
        'public' => 'getPublic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['actor'] = isset($data['actor']) ? $data['actor'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
        $this->container['actor_content_type'] = isset($data['actor_content_type']) ? $data['actor_content_type'] : null;
        $this->container['target_content_type'] = isset($data['target_content_type']) ? $data['target_content_type'] : null;
        $this->container['verb'] = isset($data['verb']) ? $data['verb'] : null;
        $this->container['actor_object_id'] = isset($data['actor_object_id']) ? $data['actor_object_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['target_object_id'] = isset($data['target_object_id']) ? $data['target_object_id'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actor_object_id'] === null) {
            $invalidProperties[] = "'actor_object_id' can't be null";
        }
        if ((mb_strlen($this->container['actor_object_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'actor_object_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['target_object_id']) && (mb_strlen($this->container['target_object_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'target_object_id', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets actor
     *
     * @return string|null
     */
    public function getActor()
    {
        return $this->container['actor'];
    }

    /**
     * Sets actor
     *
     * @param string|null $actor actor
     *
     * @return $this
     */
    public function setActor($actor)
    {
        $this->container['actor'] = $actor;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string|null
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string|null $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets actor_content_type
     *
     * @return \OpenAPI\Client\Model\ContentType|null
     */
    public function getActorContentType()
    {
        return $this->container['actor_content_type'];
    }

    /**
     * Sets actor_content_type
     *
     * @param \OpenAPI\Client\Model\ContentType|null $actor_content_type actor_content_type
     *
     * @return $this
     */
    public function setActorContentType($actor_content_type)
    {
        $this->container['actor_content_type'] = $actor_content_type;

        return $this;
    }

    /**
     * Gets target_content_type
     *
     * @return \OpenAPI\Client\Model\ContentType|null
     */
    public function getTargetContentType()
    {
        return $this->container['target_content_type'];
    }

    /**
     * Sets target_content_type
     *
     * @param \OpenAPI\Client\Model\ContentType|null $target_content_type target_content_type
     *
     * @return $this
     */
    public function setTargetContentType($target_content_type)
    {
        $this->container['target_content_type'] = $target_content_type;

        return $this;
    }

    /**
     * Gets verb
     *
     * @return \OpenAPI\Client\Model\EventType|null
     */
    public function getVerb()
    {
        return $this->container['verb'];
    }

    /**
     * Sets verb
     *
     * @param \OpenAPI\Client\Model\EventType|null $verb verb
     *
     * @return $this
     */
    public function setVerb($verb)
    {
        $this->container['verb'] = $verb;

        return $this;
    }

    /**
     * Gets actor_object_id
     *
     * @return string
     */
    public function getActorObjectId()
    {
        return $this->container['actor_object_id'];
    }

    /**
     * Sets actor_object_id
     *
     * @param string $actor_object_id actor_object_id
     *
     * @return $this
     */
    public function setActorObjectId($actor_object_id)
    {
        if ((mb_strlen($actor_object_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $actor_object_id when calling Event., must be smaller than or equal to 255.');
        }

        $this->container['actor_object_id'] = $actor_object_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets target_object_id
     *
     * @return string|null
     */
    public function getTargetObjectId()
    {
        return $this->container['target_object_id'];
    }

    /**
     * Sets target_object_id
     *
     * @param string|null $target_object_id target_object_id
     *
     * @return $this
     */
    public function setTargetObjectId($target_object_id)
    {
        if (!is_null($target_object_id) && (mb_strlen($target_object_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $target_object_id when calling Event., must be smaller than or equal to 255.');
        }

        $this->container['target_object_id'] = $target_object_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


