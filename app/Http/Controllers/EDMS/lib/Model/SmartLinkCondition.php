<?php
/**
 * SmartLinkCondition
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SmartLinkCondition Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SmartLinkCondition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartLinkCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'expression' => 'string',
        'foreign_document_data' => 'string',
        'inclusion' => 'string',
        'id' => 'int',
        'negated' => 'bool',
        'operator' => 'string',
        'smart_link_url' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'expression' => null,
        'foreign_document_data' => null,
        'inclusion' => null,
        'id' => null,
        'negated' => null,
        'operator' => null,
        'smart_link_url' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'expression' => 'expression',
        'foreign_document_data' => 'foreign_document_data',
        'inclusion' => 'inclusion',
        'id' => 'id',
        'negated' => 'negated',
        'operator' => 'operator',
        'smart_link_url' => 'smart_link_url',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'expression' => 'setExpression',
        'foreign_document_data' => 'setForeignDocumentData',
        'inclusion' => 'setInclusion',
        'id' => 'setId',
        'negated' => 'setNegated',
        'operator' => 'setOperator',
        'smart_link_url' => 'setSmartLinkUrl',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'expression' => 'getExpression',
        'foreign_document_data' => 'getForeignDocumentData',
        'inclusion' => 'getInclusion',
        'id' => 'getId',
        'negated' => 'getNegated',
        'operator' => 'getOperator',
        'smart_link_url' => 'getSmartLinkUrl',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INCLUSION_AMPERSAND = '&';
    const INCLUSION_PIPE = '|';
    const OPERATOR_EXACT = 'exact';
    const OPERATOR_IEXACT = 'iexact';
    const OPERATOR_CONTAINS = 'contains';
    const OPERATOR_ICONTAINS = 'icontains';
    const OPERATOR_IN = 'in';
    const OPERATOR_GT = 'gt';
    const OPERATOR_GTE = 'gte';
    const OPERATOR_LT = 'lt';
    const OPERATOR_LTE = 'lte';
    const OPERATOR_STARTSWITH = 'startswith';
    const OPERATOR_ISTARTSWITH = 'istartswith';
    const OPERATOR_ENDSWITH = 'endswith';
    const OPERATOR_IENDSWITH = 'iendswith';
    const OPERATOR_REGEX = 'regex';
    const OPERATOR_IREGEX = 'iregex';



    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInclusionAllowableValues()
    {
        return [
            self::INCLUSION_AMPERSAND,
            self::INCLUSION_PIPE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EXACT,
            self::OPERATOR_IEXACT,
            self::OPERATOR_CONTAINS,
            self::OPERATOR_ICONTAINS,
            self::OPERATOR_IN,
            self::OPERATOR_GT,
            self::OPERATOR_GTE,
            self::OPERATOR_LT,
            self::OPERATOR_LTE,
            self::OPERATOR_STARTSWITH,
            self::OPERATOR_ISTARTSWITH,
            self::OPERATOR_ENDSWITH,
            self::OPERATOR_IENDSWITH,
            self::OPERATOR_REGEX,
            self::OPERATOR_IREGEX,
        ];
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['expression'] = isset($data['expression']) ? $data['expression'] : null;
        $this->container['foreign_document_data'] = isset($data['foreign_document_data']) ? $data['foreign_document_data'] : null;
        $this->container['inclusion'] = isset($data['inclusion']) ? $data['inclusion'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['negated'] = isset($data['negated']) ? $data['negated'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['smart_link_url'] = isset($data['smart_link_url']) ? $data['smart_link_url'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['expression'] === null) {
            $invalidProperties[] = "'expression' can't be null";
        }
        if ($this->container['foreign_document_data'] === null) {
            $invalidProperties[] = "'foreign_document_data' can't be null";
        }
        if ((mb_strlen($this->container['foreign_document_data']) > 128)) {
            $invalidProperties[] = "invalid value for 'foreign_document_data', the character length must be smaller than or equal to 128.";
        }

        $allowedValues = $this->getInclusionAllowableValues();
        if (!is_null($this->container['inclusion']) && !in_array($this->container['inclusion'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'inclusion', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['operator'] === null) {
            $invalidProperties[] = "'operator' can't be null";
        }
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets expression
     *
     * @return string
     */
    public function getExpression()
    {
        return $this->container['expression'];
    }

    /**
     * Sets expression
     *
     * @param string $expression The expression using document properties to be evaluated against the foreign document field.
     *
     * @return $this
     */
    public function setExpression($expression)
    {
        $this->container['expression'] = $expression;

        return $this;
    }

    /**
     * Gets foreign_document_data
     *
     * @return string
     */
    public function getForeignDocumentData()
    {
        return $this->container['foreign_document_data'];
    }

    /**
     * Sets foreign_document_data
     *
     * @param string $foreign_document_data This represents the metadata of all other documents.
     *
     * @return $this
     */
    public function setForeignDocumentData($foreign_document_data)
    {
        if ((mb_strlen($foreign_document_data) > 128)) {
            throw new \InvalidArgumentException('invalid length for $foreign_document_data when calling SmartLinkCondition., must be smaller than or equal to 128.');
        }

        $this->container['foreign_document_data'] = $foreign_document_data;

        return $this;
    }

    /**
     * Gets inclusion
     *
     * @return string|null
     */
    public function getInclusion()
    {
        return $this->container['inclusion'];
    }

    /**
     * Sets inclusion
     *
     * @param string|null $inclusion The inclusion is ignored for the first item.
     *
     * @return $this
     */
    public function setInclusion($inclusion)
    {
        $allowedValues = $this->getInclusionAllowableValues();
        if (!is_null($inclusion) && !in_array($inclusion, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inclusion', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inclusion'] = $inclusion;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets negated
     *
     * @return bool|null
     */
    public function getNegated()
    {
        return $this->container['negated'];
    }

    /**
     * Sets negated
     *
     * @param bool|null $negated Inverts the logic of the operator.
     *
     * @return $this
     */
    public function setNegated($negated)
    {
        $this->container['negated'] = $negated;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets smart_link_url
     *
     * @return string|null
     */
    public function getSmartLinkUrl()
    {
        return $this->container['smart_link_url'];
    }

    /**
     * Sets smart_link_url
     *
     * @param string|null $smart_link_url smart_link_url
     *
     * @return $this
     */
    public function setSmartLinkUrl($smart_link_url)
    {
        $this->container['smart_link_url'] = $smart_link_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


