<?php
/**
 * WritableAccessControlListPermission
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mayan EDMS API
 *
 * Free Open Source Electronic Document Management System
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WritableAccessControlListPermission Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WritableAccessControlListPermission implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WritableAccessControlListPermission';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'namespace' => 'string',
        'pk' => 'string',
        'label' => 'string',
        'acl_permission_url' => 'string',
        'acl_url' => 'string',
        'permission_pk' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'namespace' => null,
        'pk' => null,
        'label' => null,
        'acl_permission_url' => null,
        'acl_url' => null,
        'permission_pk' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'namespace' => 'namespace',
        'pk' => 'pk',
        'label' => 'label',
        'acl_permission_url' => 'acl_permission_url',
        'acl_url' => 'acl_url',
        'permission_pk' => 'permission_pk'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'namespace' => 'setNamespace',
        'pk' => 'setPk',
        'label' => 'setLabel',
        'acl_permission_url' => 'setAclPermissionUrl',
        'acl_url' => 'setAclUrl',
        'permission_pk' => 'setPermissionPk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'namespace' => 'getNamespace',
        'pk' => 'getPk',
        'label' => 'getLabel',
        'acl_permission_url' => 'getAclPermissionUrl',
        'acl_url' => 'getAclUrl',
        'permission_pk' => 'getPermissionPk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['pk'] = isset($data['pk']) ? $data['pk'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['acl_permission_url'] = isset($data['acl_permission_url']) ? $data['acl_permission_url'] : null;
        $this->container['acl_url'] = isset($data['acl_url']) ? $data['acl_url'] : null;
        $this->container['permission_pk'] = isset($data['permission_pk']) ? $data['permission_pk'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['permission_pk'] === null) {
            $invalidProperties[] = "'permission_pk' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets namespace
     *
     * @return string|null
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string|null $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets pk
     *
     * @return string|null
     */
    public function getPk()
    {
        return $this->container['pk'];
    }

    /**
     * Sets pk
     *
     * @param string|null $pk pk
     *
     * @return $this
     */
    public function setPk($pk)
    {
        $this->container['pk'] = $pk;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets acl_permission_url
     *
     * @return string|null
     */
    public function getAclPermissionUrl()
    {
        return $this->container['acl_permission_url'];
    }

    /**
     * Sets acl_permission_url
     *
     * @param string|null $acl_permission_url API URL pointing to a permission in relation to the access control list to which it is attached. This URL is different than the canonical workflow URL.
     *
     * @return $this
     */
    public function setAclPermissionUrl($acl_permission_url)
    {
        $this->container['acl_permission_url'] = $acl_permission_url;

        return $this;
    }

    /**
     * Gets acl_url
     *
     * @return string|null
     */
    public function getAclUrl()
    {
        return $this->container['acl_url'];
    }

    /**
     * Sets acl_url
     *
     * @param string|null $acl_url acl_url
     *
     * @return $this
     */
    public function setAclUrl($acl_url)
    {
        $this->container['acl_url'] = $acl_url;

        return $this;
    }

    /**
     * Gets permission_pk
     *
     * @return string
     */
    public function getPermissionPk()
    {
        return $this->container['permission_pk'];
    }

    /**
     * Sets permission_pk
     *
     * @param string $permission_pk Primary key of the new permission to grant to the access control list.
     *
     * @return $this
     */
    public function setPermissionPk($permission_pk)
    {
        $this->container['permission_pk'] = $permission_pk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    //DISME - Added getter for container for Laravel response purposes in controller
    public function getContainer(){

        return $this->container;

    }

}


